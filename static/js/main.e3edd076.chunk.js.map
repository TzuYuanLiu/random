{"version":3,"sources":["Random.js","App.js","serviceWorker.js","index.js"],"names":["array","max","length","Random","state","index","rendomName","random","Math","floor","randomName","setState","this","style","marginTop","fontSize","cursor","width","border","height","background","onClick","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2OAEMA,EAAQ,CACb,UACA,SACA,QACA,MACA,OACA,SACA,QACA,OACA,MACA,OACA,QACA,OACA,MACA,KACA,QACA,OACA,iBAEKC,EAAMD,EAAME,OAEGC,E,2MACpBC,MAAQ,CACPC,MAAO,EACPD,OAAO,EACPE,WAAY,I,EAEbC,OAAS,WAMR,OAAOC,KAAKC,MAAMD,KAAKD,SAAWN,I,EAEnCS,WAAa,WAMZ,IAAML,EAAQG,KAAKC,MAAMD,KAAKD,SAAWN,GACzC,EAAKU,SAAS,CAAEL,WAAYN,EAAMK,M,wEAKzB,IAAD,OACAC,EAAeM,KAAKR,MAApBE,WACR,OACC,yBAAKO,MAAO,CAAEC,UAAW,UACxB,yBAAKD,MAAO,CAAEE,SAAU,UAAYT,GACpC,4BACCO,MAAO,CACNG,OAAQ,UACRC,MAAO,QACPC,OAAQ,kBACRC,OAAQ,OACRC,WAAY,SAEbC,QAAS,WACR,EAAKX,eATP,gB,GA/BgCY,aCIrBC,MAtBf,WACC,OACC,yBAAKC,UAAU,OAed,kBAAC,EAAD,QCViBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e3edd076.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst array = [\n\t'Kunming',\n\t'Quincy',\n\t'Anton',\n\t'Ben',\n\t'Nora',\n\t'Yassin',\n\t'Grace',\n\t'Jocy',\n\t'Ray',\n\t'Dora',\n\t'Vince',\n\t'Hank',\n\t'Tom',\n\t'Ed',\n\t'Derek',\n\t'Json',\n\t'小Michael'\n];\nconst max = array.length;\n\nexport default class Random extends Component {\n\tstate = {\n\t\tindex: 0,\n\t\tstate: false,\n\t\trendomName: ''\n\t};\n\trandom = () => {\n\t\t// const { state } = this.state;\n\t\t// while (state) {\n\t\t// \tconst index = Math.floor(Math.random() * max);\n\t\t// \tconsole.log('index', index);\n\t\t// }\n\t\treturn Math.floor(Math.random() * max);\n\t};\n\trandomName = () => {\n\t\t// const { state } = this.state;\n\t\t// while (state) {\n\t\t// \tconst index = Math.floor(Math.random() * max);\n\t\t// \tconsole.log('index', index);\n\t\t// }\n\t\tconst index = Math.floor(Math.random() * max);\n\t\tthis.setState({ rendomName: array[index] });\n\t};\n\t// componentDidUpdate = () => {\n\n\t// }\n\trender() {\n\t\tconst { rendomName } = this.state;\n\t\treturn (\n\t\t\t<div style={{ marginTop: '200px' }}>\n\t\t\t\t<div style={{ fontSize: '150px' }}>{rendomName}</div>\n\t\t\t\t<button\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tcursor: 'pointer',\n\t\t\t\t\t\twidth: '200px',\n\t\t\t\t\t\tborder: '1px solid black',\n\t\t\t\t\t\theight: '30px',\n\t\t\t\t\t\tbackground: 'white'\n\t\t\t\t\t}}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tthis.randomName();\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\trandom!\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Random from './Random';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n\t\t\t<Random />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}